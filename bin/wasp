#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\ConsoleEvents;

define('WASP_TYPE', 'wasp-plugin');

// allow an autoloader to be explicitly passed
if ($autoload = getenv('WASP_AUTOLOAD')) {
	$paths = [$autoload];
} else {
	$vendorDir = getenv('WASP_VENDOR_DIR') ?: getenv('COMPOSER_VENDOR_DIR') ?: 'vendor';
	$paths = [__DIR__ . '/../../../autoload.php', __DIR__ . "/../$vendorDir/autoload.php", __DIR__ . "/$vendorDir/autoload.php"];
}

// attempt to find the autoload file for this project
do {
	foreach ($paths as $path) {
		if (file_exists($path)) {
			require_once $path;
			// set the lock file in relation to this
			$lockFile = dirname($path) . '/../composer.lock';
			break 2;
		}
	}
	// if we reach this point, we did not find the autoload file
	echo 'Could not find autoload file';
	exit(1);
} while (0);

$application = new Application('wasp', 'beta');
$application->plugins = [];
$application->services = (object) [
	'dispatcher' => new EventDispatcher(),
	'input' => new ArgvInput(),
	'output' => new ConsoleOutput(),
];
$application->setDispatcher($application->services->dispatcher);
$errOut = $application->services->output->getErrorOutput();
// default to decoration for the logger (can be disabled with --no-ansi)
$errOut->setDecorated(true);
$application->services->logger = new ConsoleLogger($errOut);

// look for any plugins inside of the lock file
$lockFile = getenv('WASP_LOCK') ?: $lockFile;
// do we have one?
if (file_exists($lockFile)) {
	$lock = json_decode(file_get_contents($lockFile), true);
	if (empty($lock)) {
		$application->services->logger->warning('Could not read lock file');
	} else {
		foreach (['packages', 'packages-dev'] as $key) {
			if (empty($lock[$key]) || !is_array($lock[$key])) {
				continue;
			}

			// check each package to see if it is a wasp plugin
			foreach ($lock[$key] as $package) {
				if (!isset($package['type']) || $package['type'] !== WASP_TYPE) {
					continue;
				}

				// class name is set?
				if (empty($package['extra']['class'])) {
					$application->services->logger->warning("Class name for {$package['name']} is not set");
					continue;
				}

				if (!class_exists($package['extra']['class'])) {
					$application->services->logger->warning("Specified class does not exist: {$package['extra']['class']}");
					continue;
				}

				// invoke the plugin!
				$plugin = $application->plugins[] = new $package['extra']['class']($application);
				if ($plugin instanceof EventSubscriberInterface) {
					$application->services->dispatcher->addSubscriber($plugin);
				}
			}
		}
	}
} else {
	$application->services->logger->warning('No lock file located');
}

// add global options
$application->getDefinition()->addOption(
	new InputOption('include', null, InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'Additional files to include before executing.')
);
// process global options before running command
$application->services->dispatcher->addListener(ConsoleEvents::COMMAND, function ($event) use ($application) {
	// optional files to include
	foreach ($application->services->input->getOption('include') as $file) {
		if (!is_readable($file)) {
			throw new RuntimeException("File does not exist or is not readable: $file");
		}
		require_once $file;
	}
});
$application->add(new OomphInc\WASP\Command\Generate());
$application->run($application->services->input, $application->services->output);
