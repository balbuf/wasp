#!/usr/bin/env php
<?php

namespace OomphInc\WASP;

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\ConsoleEvents;

// allow an autoloader to be explicitly passed
if ($autoload = getenv('WASP_AUTOLOAD')) {
	$paths = [$autoload];
} else {
	$vendorDir = getenv('WASP_VENDOR_DIR') ?: getenv('COMPOSER_VENDOR_DIR') ?: 'vendor';
	$paths = [__DIR__ . '/../../../autoload.php', __DIR__ . "/../$vendorDir/autoload.php", __DIR__ . "/$vendorDir/autoload.php"];
}

// attempt to find the autoload file for this project
do {
	foreach ($paths as $path) {
		if (file_exists($path)) {
			require_once $path;
			// set the lock file in relation to this
			$lockFile = dirname($path) . '/../composer.lock';
			break 2;
		}
	}
	// if we reach this point, we did not find the autoload file
	echo 'Could not find autoload file';
	exit(1);
} while (0);

// create some services
$input = new ArgvInput();
$output = new ConsoleOutput();
$errOut = $output->getErrorOutput();
// default to decoration for the logger (can be disabled with --no-ansi)
$errOut->setDecorated(true);
$logger = new ConsoleLogger($errOut);

// look for any plugins inside of the lock file
$lockFile = getenv('WASP_LOCK') ?: $lockFile;
// do we have one?
if (file_exists($lockFile)) {
	$lock = file_get_contents($lockFile);
} else {
	$logger->warning('No lock file located');
	$lock = null;
}

// set up the application
$wasp = new Wasp(compact('input', 'output', 'logger'), $lock);

// run it!
exit($wasp->run());
